
ORGANISATIONAL POLICY
=====================

- system administrator needs to establish who is accountable for security breaches
- a procedure should be developed to deal with a security breach if detected
- a process should be established to monitor the system to detect security breaches
- qualification requirements should be determined for system administrators and developers to maintain system integrity
- determine and ensure compliance with relevant regulatory and standards requirements
- develop application/organisation-specific tests to ensure authorisation tier segregation based on users and groups in the database (to ensure groups and users have been correctly registered)
- when a new group or user is required, update the aforementioned tier segregation tests (or develop and test an automated registration system)
- establish and test TLS on server


SERVER SECURITY
===============

- consider all aspects of the server infrastructure, including:
  * operating system selection and configuration
  * webserver software (eg apache2) configuration
  * firewall
  * filesystem permissions
  * sql server configuration
  * php configuration
  * other installed/running applications/packages
  * remote access
  * physical infrastructure security
  * personnel with either direct or remote access
  * network architecture, configuration and topography
  * security between hosts (in case of clustering)
  * software update management
  * monitoring of logs
  * backups
  * disaster recovery
  * awareness of evolving security best practices

- framework and application files to be write protected (only owner user to be able to edit)
- limit the schemas that webdb_user mysql user can access (block access to webdb.users/groups/user_groups tables)
- Let's Encrypt TLS
- iptables (whitelist/pessimistic) - UFW is a Debian iptables frontend (use to develop/test rules on dev)
- hosts.allow/deny
- logging
- unresponsive default apache2 vhost

- store activity logs securely

disabling ICMP redirect
SYN attack protection
disable IP source routing

- changing ServerTokens in Apache

- determine running services:
  $ sudo ss -atpu

- disable dangerous PHP functions (where possible)

- store application code outside public and have single index.php with include only

- keep prod minimalist and headless
- don't install things like desktop environment, ftp, xrdp, irc, phpmyadmin, samba, etc on prod
- limited user remote access by ssh only with no password login (use ssh-keygen)
- disallow root ssh
- disallow su (sudo-only from limited user)

- use fail2ban

- https://www.cirt.net/Nikto2 (web server scanner)


FRAMEWORK SECURITY
==================

TODO: FOR PRODUCTION REMOVE/COMMENT OUT THE BACKTRACE IN THE \webdb\utils\system_message FUNCTION

TODO: CHANGE FROM PASSWORD_BCRYPT TO PASSWORD_ARGON2ID (REQUIRES PHP 7.3.0) => REQUIRES CHANGE TO OPTIONS (https://www.php.net/manual/en/function.password-hash.php) - refer to https://github.com/crutchy-/webdb/issues/24
      [ONLY NEED TO CHANGE THE \webdb\users\webdb_password_hash FUNCTION]

- for production, comment out the testing show_message in the \webdb\users\send_reset_password_message function that outputs the emailed message (including link) to the browser window

- [tested] if any of the higher 3 octets of the user's remote address change, invalidate cookie login (require password)
- [tested] changes to the right/lowest octet are permitted for login by cookie to allow for dhcp subnets
- [tested] if user's user agent changes, invalidate cookie login (require password)
- user agent changes will occur when a web browser is updated, so every time a user updates their web browser they will be prompted to login next
- user agent changes will also occur if a different browser is used (eg: chrome vs firefox)
- [tested] user agent header is required

- [] when a new user is inserted, the password field contains an invalid hash (*) which can never be replicated using the normal login system
- [] the first time that a user views the login prompt, they will need to do a password reset (password field should contain invalid hash)

- [] there is no way for an unauthenticated user to register a new user (new users must be registered by admin)

- [] when user first logs in, trigger password change (implemented via default value of 1 for pw_change field in users.list)
- [] when password reset has been triggered, disable login by password/cookie (allow 'reset password' button to resend new email)

- [] when changing password, don't allow old and new passwords to be the same
- [] when changing password, don't allow new password to be any of a list of prohibited passwords (eg: 'password')
- [] when changing password, new password must be at least 8 characters
- [] when changing password, new password cannot be longer than 400 characters (only first 72 characters will be hashed anyway with the remainder truncated, but a longer password phrase may be easier for the user to remember)
- a maximum password length also limits denial of service attacks (https://www.acunetix.com/vulnerabilities/web/long-password-denial-of-service/)

- long passwords (>72 chars) aren't pre-hashed with sha256/512 (not required and may be less secure per discussion on the web)

- [] if pw_change flag is set in a user record, prompt user to change their password on login (no ability to skip or navigate directly to different page)
- pw_change flag can either be manually set by admin in user edit form, or if required a crontab script could be implemented later to force password change every 2 months or so if required

- [] lock out password and cookie login after 7 failed attempts
- [] locked out accounts can only be unlocked by password reset (or by manual setting of failed_login_count to 0 in user record by admin)
- [] failed login attemps can occur either by incorrect password, invalidated cookie (except when remote address or user agent changes), admin login from non-whitelisted address or attempting to login with a password that exceeds the maximum length
- [] changes to remote address or user agent will invalidate a login cookie but not increment the failed login attempt counter
- [] blacklisted ip ranges cannot login

- when viewing users list, all user record data (including hashes) will be passed to the \webdb\utils\computed_field_iso_datetime_format function via computed field config in users.list

- all content output to the browser must either be authenticated by assignment of $settings["user_record"] or permitted by the $settings["unauthenticated_content"] flag (or both)
- this is checked in the output buffer callback function \webdb\utils\ob_postprocess
- also applies to ajax responses
- the \webdb\utils\system_message function (and by reference the \webdb\utils\show_message function) sets the $settings["unauthenticated_content"]
- on failure to find either of these settings, a simple authentication failure message is sent to the browser (whatever buffer was prepared to be sent to the user is overwritten)
- if a var_dump() followed by die is required outside an already authenticated program route, the \webdb\utils\debug_var_dump function is available, which sets the $settings["unauthenticated_content"] flag

- [] csrf error invalidates a password reset link

- [] username is case insensitive and spaces are not permitted at the beginning or end of a username
- there is a separate field for email (username and email need not be the same)

- [] admin logins must be made from whitelisted IP addresses, which are added to the $settings["admin_remote_address_whitelist"] array, which is initialised with 127.0.0.1
- admin passwords, cookies and password reset keys are hashed using a dedicated (higher) bcrypt hashing cost setting (13 vs 11)

- login cookies have HttpOnly and SameSite=Strict attributes, and the domain attribute set to $_SERVER["HTTP_HOST"]
- [] when a login failure occurs (using password or cookie), the login cookie field in the database for that user is set to *

- authentication events are logged

- [] all post requests are required to contain a valid csrf token field, which must be verified against a valid csrf token hash cookie (including logins)
- [] new csrf tokens are generated only on output of a new page
- [] ajax requests are validated using their parent page csrf token (accessed by the global ajax function via replication of the token in a hidden div with an id)

- changes to server data are (should) be made by post requests, not via get/url requests
- [] database changes aren't possible from non-post (and therefore non-csrf-protected) requests, unless a hardcoded flag is set in $settings

- [] if user or group is disabled (by an admin using the users/groups editor forms), the affected user/group will no longer be able to access the system
- [] if a group is disabled, all users linked to that group will no longer be able to access forms/templates restricted to the disabled group

- sources of user input requiring sanitising:
  * sanitising of individual data fields not required on input since prepared statements are used to insert/update records in database
  * sort param is from the url and is passed into sql query via sql_fill rather than a prepared statement, so it must exist as a field in the form config
  * other uses of sql_fill have been reviewed and are are only passed data from form config files
  * the use of sql_fill is a potential vulnerability though and should be used with care to avoid inadvertently passing unsanitised user data into raw sql statements

- sources of user output requiring escaping:
  * control types: lookup, span, file, text, memo, combobox, listbox, radiogroup, date, checkbox
  * list cells, edit page controls, insert page controls, list insert/update row controls, advanced search controls

- csrf check is performed prior to user authentication
- throw error if user csrf token exceeds max age
- invalidation of login cookie on csrf error was considered (based on username cookie) but in the event of deliberate attack, this invalidation could indirectly
  become a form of forgery itself as a deliberate annoyance (the attacker could forge username cookies and repeatedly invalidate a bunch of legitimate logins)

- framework security flow of control:
  * an application is always started by navigating to the application index.php file in the web browser
  * the application index.php file can include other application-specific files containing custom interfaces, ajax stubs and computed field functions, but should finally include the framework index.php file
  * the framework index.php (bootstrap) file performs the following in sequence:
    ~ includes other essential framework php files
    ~ loads framework, common and application settings (in that order)
    ~ loads application and framework form files
    ~ initialises database connections
    ~ cli dispatch branch
    ~ user agent validation (for non-cli)
    ~ csrf checking
    ~ user authentication dispatch branch
    ~ form dispatch branch
  * cli dispatch handles testing, database schema initialisation and other system administration and development utility functions (can only be triggered from cli)
  * user authentication dispatch handles password/cookie login, logout, password reset, password change and user lockout
  * form dispatch handles ajax requests and generation of lists and editor forms, including permissions management

potential causes for login failure:
- [] incorrect username and/or password for login form
- [] login cookie deleted at browser end
- [] username cookie deleted at browser end
- [] csrf error
- csrf token exceeds max age
- [tested] remote address change
- [tested] user agent changed
- [] password reset
- [] remote address blacklisted
- [] remote address not whitelisted
- [] user record disabled by admin
- [] user record deleted by admin
- [] admin login not in admin remote address whitelist


potential causes for password reset link invalidation:
- [] link expires (user waits too long to click link)
- [] failed username/password login attempt
- [] failed login cookie attempt
- [] password changed
- [] reset key is overwritten by admin in user record


tips (https://www.rackaid.com/blog/server-security-tips/):
- Test file upload fields to assure code cannot be uploaded
- Secure web application admin areas with IP based restrictions
- Sanitize user input
- Put sensitive files outside of document root or restrict access
- Avoiding using shell commands within scripts
- Don’t trust HTTP referer fields as they are easily forged
- Use POST instead of GET to submit data so sensitive information is not in the URL
- Validate data server-side not client-side
- Do not rely on relative file and path names. Always set base directories
- Limit file upload, creation activities to specific directories
- Create safe error messages by not disclosing sensitive information in errors


APPLICATION SECURITY
====================

- application-specific ajax stubs, custom interfaces and computed field functions should be developed and tested in ways as to not introduce any new
  vulnerabilities or counter/negate existing framework security mechanisms


SECURITY TESTING
================

$ php <myapp>/index.php run_tests

- tests are initialised from webdb/test/test.php (supported by webdb/test/test_utils.php)
- additional security tests are under webdb/test/security.php (supported by webdb/test/security_utils.php and webdb/test/test_utils.php)

- multi-stage tests should be performed based on initialisation with a pass result, and any stage that fails should negate the result
  that way any stage that fails will cause the whole test to fail
  eg:
    $test_success=true;
    if (\webdb\test\test_stage()==false)
    {
      $test_success=false;
    }
    if (\webdb\test\another_test_stage_expecting_false()==true)
    {
      $test_success=false;
    }
    if (\webdb\test\yet_another_test_stage()==false)
    {
      $test_success=false;
    }

- security tests are performed using crafted get and post requests sent to the web server by a stream socket client
- the communication functions are:
  * \webdb\test\utils\submit_request
  * \webdb\test\utils\wget
  * \webdb\test\utils\wpost


THREATS & COUNTERMEASURES
=========================

Refer to OWASP Top Ten:
- injection flaws
  * countermeasures: filtering input, use of parameterized queries (stored procedures/prepared statements),
    limit database privileges, custom errors
- broken authentication or access control
  * countermeasures: use authentication strength commensurate to the risk of the transaction,
    protect authentication credentials with encryption (TLS), use challenge/responses in password resets,
    userID resets, use trusted authentication (single sign-on) not impersonation, do not cache
    login pages, enforce idle time-out
    re-issue session ids after each post, protect session id from caching and logging,
    set secure flag, uses syncronized session management across servers, limit
    sessions per user, invalidate them at user/idle logouts
- sensitive data exposure
- insecure storage
    * countermeasures: encrypt authentication credentials and sensitive information in storage,
      use standard encryption strength algorithms and minimum key lengths, use
      secure keys storage and secure management
- xml eternal entities (xxe)
- security misconfiguration
- cross-site scripting (xss)
  * countermeasures: filtering should be in place at the different layers of the architecture
    client, web server and web application
- insecure deserialization
- using components with known vulnerabilities
- insufficient logging & monitoring
- failure to restrict url access
  * countermeasures: ensure that role-based access control is enforced on the server side to
    enforce which user has access to which web page, no hidden parameters to enforce which
    web pages are accessible, only allow file types that you intend to serve, block any attempts
    to access log files, xml files, etc
- insecure remote file include
  * countermeasures: do not rely on user inputs, use hash-tables, white-list filter/escape commands,
    validate file type-format, run anti-virus on uploaded files, segregate uploads
- insecure direct object reference (accessing a file/db record, key via url parameter)
  * countermeasures: enforce server side authorization controls, only expose direct object references
    to authorized users, do not expose references to primary keys and filenames, enforce strict
    business logic/rules depending on server side parameters
- csrf attack
  * countermeasures: validate each request with one time use token, leverage struts-tokens, esapi,
    re-authenticate when performing high risk transactions, enforce post only for
    forms with sensitive data
- information leakage via improper error handling
  * countermeasures: provide generic custom error messages during error validations,
    do not display stack traces with exception messages
- insecure (unencrypted) communication
  * countermeasures: use encrypted channel (SSL/VPN) for authenticated connections and while transmitting
    credentials, sensitive information and other private information

threats:
- phishing
    * exploit weak authorization/authentication, session management and input
      validation (xss, xfs) vulnerabilities
- privacy violations
    * exploit poor input validation, business rule and weak authorization,
      injection flaws
- identify theft
    * exploit poor or non-existent cryptographic controls, malicious file execution,
      authentication, business rule and auth checks vulnerabilities
- system compromise
    * exploit injection flaws, remote file inclusion-upload vulnerabilities
- data alteration
- data destruction
    * exploit injection flaws, remote file inclusion-upload vulnerabilities
- financial loss
    * exploit unauthorized transactions and csrf attacks, broken authentication
      and session management, insecure object reference, weak
      authorization-forceful browsing vulnerabilities
- reputation loss
    * public evidence of a vulnerability

threat sources:
- potential users (or misusers)
- where application is hosted
- what data is exposed


assign risk (probability and severity) to each threat


Symptoms are the insecure observed behavior of the application against potential vulnerabilities and exploits.
Root causes are:
- security design flaws
- security bugs (coding errors)
- insecure configuration

Quantifiable risk factors are:
- how much damage can be done
- how easy is to reproduce the exploits
- how many users are exposed
- how easy is to discover the vulnerabilities


* threat modelling (enumerated threats and minimising risk)
* categorising threats and identifying countermeasures
* tools for threat analysis:
  - threat trees
  - use/misuse cases
  - data flow diagrams




SECURITY REFERENCES
===================

https://cheatsheetseries.owasp.org/
https://www.owasp.org/index.php/Top_10-2017_Top_10
https://www.owasp.org/index.php/OWASP_Proactive_Controls

OWASP Automated Threat Handbook
